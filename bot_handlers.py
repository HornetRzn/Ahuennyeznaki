import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from models import UserProfile
from storage import storage
from config import MAX_CHAT_MESSAGES

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
GENDER_KEYBOARD = ReplyKeyboardMarkup([['Male', 'Female', 'Other']], one_time_keyboard=True)
LOOKING_FOR_KEYBOARD = ReplyKeyboardMarkup([['Men', 'Women', 'Everyone']], one_time_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.effective_user
    if not storage.get_user(user.id):
        profile = UserProfile(
            telegram_id=user.id,
            username=user.username or "",
            first_name=user.first_name
        )
        storage.save_user(profile)
        storage.set_registration_state(user.id, "AWAITING_AGE")
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.\n"
            "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?"
        )
    else:
        await update.message.reply_text(
            "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ò—Å–ø–æ–ª—å–∑—É–π /profile –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ /match –¥–ª—è –ø–æ–∏—Å–∫–∞."
        )

async def handle_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    user_id = update.effective_user.id
    state = storage.get_registration_state(user_id)
    message = update.message.text
    profile = storage.get_user(user_id)

    if not profile or not state:
        return

    if state == "AWAITING_AGE":
        try:
            age = int(message)
            if not 18 <= age <= 100:
                raise ValueError
            profile.age = age
            storage.save_user(profile)
            storage.set_registration_state(user_id, "AWAITING_GENDER")
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:",
                reply_markup=GENDER_KEYBOARD
            )
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (18-100).")

    elif state == "AWAITING_GENDER":
        if message in ["Male", "Female", "Other"]:
            profile.gender = message
            storage.save_user(profile)
            storage.set_registration_state(user_id, "AWAITING_LOOKING_FOR")
            await update.message.reply_text(
                "–ö–æ–≥–æ —Ç—ã –∏—â–µ—à—å?",
                reply_markup=LOOKING_FOR_KEYBOARD
            )
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–ª.")

    elif state == "AWAITING_LOOKING_FOR":
        if message in ["Men", "Women", "Everyone"]:
            profile.looking_for = message
            storage.save_user(profile)
            storage.set_registration_state(user_id, "AWAITING_BIO")
            await update.message.reply_text("–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ –æ —Å–µ–±–µ:")
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.")

    elif state == "AWAITING_BIO":
        profile.bio = message
        profile.registration_complete = True
        storage.save_user(profile)
        storage.set_registration_state(user_id, None)
        await update.message.reply_text(
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π /profile –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ /match –¥–ª—è –ø–æ–∏—Å–∫–∞."
        )

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile."""
    user = storage.get_user(update.effective_user.id)
    if not user:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è!")
        return

    profile_text = (
        f"–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"–ò–º—è: {user.first_name}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {user.age}\n"
        f"–ü–æ–ª: {user.gender}\n"
        f"–ò—â—É: {user.looking_for}\n"
        f"–û —Å–µ–±–µ: {user.bio}\n"
    )
    await update.message.reply_text(profile_text)

async def match(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /match."""
    user_id = update.effective_user.id
    user = storage.get_user(user_id)

    if not user or not user.registration_complete:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!")
        return

    # –ü–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    for other_id, other_user in storage.users.items():
        if (other_id != user_id and 
            other_id not in user.likes and 
            other_id not in user.dislikes):
            profile_text = (
                f"–ò–º—è: {other_user.first_name}\n"
                f"–í–æ–∑—Ä–∞—Å—Ç: {other_user.age}\n"
                f"–ü–æ–ª: {other_user.gender}\n"
                f"–û —Å–µ–±–µ: {other_user.bio}\n"
            )
            keyboard = ReplyKeyboardMarkup([
                ['üëç Like', 'üëé Dislike']
            ], one_time_keyboard=True)
            context.user_data['current_match'] = other_id
            await update.message.reply_text(profile_text, reply_markup=keyboard)
            return

    await update.message.reply_text("–°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∫–µ—Ç!")

async def chat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /chat."""
    user_id = update.effective_user.id
    matches = storage.get_matches(user_id)

    if not matches:
        await update.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π! –ò—Å–ø–æ–ª—å–∑—É–π /match –¥–ª—è –ø–æ–∏—Å–∫–∞.")
        return

    keyboard = [[str(match_id)] for match_id in matches]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª—è –æ–±—â–µ–Ω–∏—è:", reply_markup=reply_markup)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    user_id = update.effective_user.id

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if storage.get_registration_state(user_id):
        await handle_registration(update, context)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∞–π–∫–æ–≤/–¥–∏–∑–ª–∞–π–∫–æ–≤
    if update.message.text in ['üëç Like', 'üëé Dislike']:
        await handle_like_dislike(update, context)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ
    try:
        other_id = int(update.message.text)
        if other_id in storage.get_matches(user_id):
            chat = storage.get_chat(user_id, other_id) or storage.create_chat(user_id, other_id)

            if chat.message_count >= MAX_CHAT_MESSAGES:
                other_user = storage.get_user(other_id)
                if other_user and other_user.username:
                    await update.message.reply_text(
                        f"–õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω! –í–æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç: @{other_user.username}"
                    )
                else:
                    await update.message.reply_text(
                        "–õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω, –Ω–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç username."
                    )
                return

            chat.messages.append({
                'from_id': user_id,
                'text': update.message.text,
                'timestamp': update.message.date.isoformat()
            })
            chat.message_count += 1

            await update.message.reply_text(
                f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! ({chat.message_count}/{MAX_CHAT_MESSAGES} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ)"
            )
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.")

async def handle_like_dislike(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∞–π–∫–æ–≤ –∏ –¥–∏–∑–ª–∞–π–∫–æ–≤."""
    user_id = update.effective_user.id
    user = storage.get_user(user_id)
    other_id = context.user_data.get('current_match')

    if not other_id:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π /match –¥–ª—è –ø–æ–∏—Å–∫–∞!")
        return

    if update.message.text.startswith('üëç'):
        user.likes.append(other_id)
        if user_id in storage.get_user(other_id).likes:
            await update.message.reply_text("–≠—Ç–æ –≤–∑–∞–∏–º–Ω–æ! –ò—Å–ø–æ–ª—å–∑—É–π /chat –¥–ª—è –æ–±—â–µ–Ω–∏—è!")
    else:
        user.dislikes.append(other_id)

    storage.save_user(user)
    context.user_data['current_match'] = None
    await match(update, context)
